using System;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class Session
{
    [Header("Session configuration")]
    [SerializeField, Tooltip("The id of the session")]
    private string sessionID;

    [SerializeField, Tooltip("The id of the user")]
    private string userID;

    [SerializeField, Tooltip("The date of the session")]
    private DateTime currentDate = DateTime.Now;

    [SerializeField, Tooltip("The configuration for the objects")]
    private List<FeedbackConfiguration> feedbackConfigurations = new List<FeedbackConfiguration>();

    [SerializeField, Tooltip("The list of all the trackable objects that are close to this user.")]
    private List<TrackableObject> closeTrackableObjects = new List<TrackableObject>();

    [SerializeField, Tooltip("The list of all reference positions during this session")]
    private List<ReferencePosition> referencePositions = new List<ReferencePosition>();

    [SerializeField, Tooltip("The feedback generated by this session")]
    private List<AdaptiveFeedback> feedbackLog = new List<AdaptiveFeedback>();

    /// <summary>
    /// Adds all the trackable objects to this session.
    /// </summary>
    /// <param name="trackableObjects">the trackable objects</param>
    public void AddTrackableObjects(List<TrackableObject> trackableObjects) {
        if (trackableObjects != null) {
            trackableObjects.ForEach(trackableObject =>
            {
                if (!closeTrackableObjects.Contains(trackableObject)) {
                    this.closeTrackableObjects.Add(trackableObject);
                }
            });
        }
    }

    /// <summary>
    /// Adds an list of reference positions to this sessison.
    /// </summary>
    /// <param name="referencePositions">the positions</param>
    public void AddReferencePositions(List<ReferencePosition> referencePositions) {
        if(referencePositions != null)
        {
            referencePositions.ForEach(referencePosition =>
            {
                if (!referencePositions.Contains(referencePosition))
                {
                    this.referencePositions.Add(referencePosition);
                }
            });
        }
    }

    /// <summary>
    /// Gets the date and time.
    /// </summary>
    /// <returns>the date time</returns>
    public DateTime GetDateTime() => currentDate;

    /// <summary>
    /// Gets the trackable objects.
    /// </summary>
    /// <returns></returns>
    public List<TrackableObject> GetTrackableObjects() => closeTrackableObjects;

    /// <summary>
    /// Gets the adaptiveFeedback configurations
    /// </summary>
    /// <returns>a list with the configurations</returns>
    public List<FeedbackConfiguration> GetFeedbackConfigurations() => feedbackConfigurations;

    /// <summary>
    /// Adds adaptiveFeedback to the log.
    /// </summary>
    /// <param name="adaptiveFeedback">the adaptiveFeedback to add</param>
    public void AddFeedback(AdaptiveFeedback adaptiveFeedback)
    {
        if (!feedbackLog.Contains(adaptiveFeedback))
        {
            feedbackLog.Add(adaptiveFeedback);
        }
    }
}
